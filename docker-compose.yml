version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: analytics-postgres
    environment:
      POSTGRES_DB: analytics_db
      POSTGRES_USER: analytics
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/01-init_db.sql
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics -d analytics_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: analytics-backend
    environment:
      - DATABASE_URL=postgresql://analytics:password@postgres:5432/analytics_db
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - DEBUG=false
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - analytics-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: analytics-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - analytics-network
    depends_on:
      - backend
    restart: unless-stopped

  # MCP Database Toolbox Server
  mcp-database:
    image: node:18-alpine
    container_name: analytics-mcp-database
    working_dir: /app
    command: >
      sh -c "
        npm install -g @modelcontextprotocol/server-postgres &&
        npx @modelcontextprotocol/server-postgres
      "
    environment:
      - POSTGRES_CONNECTION_STRING=postgresql://analytics:password@postgres:5432/analytics_db
    networks:
      - analytics-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # MCP Vizro Server
  mcp-vizro:
    image: node:18-alpine
    container_name: analytics-mcp-vizro
    working_dir: /app
    command: >
      sh -c "
        npm install -g @modelcontextprotocol/server-vizro &&
        npx @modelcontextprotocol/server-vizro
      "
    environment:
      - VIZRO_CONFIG_PATH=/app/vizro_config.json
    volumes:
      - ./backend/mcp_servers/vizro_config.json:/app/vizro_config.json
    networks:
      - analytics-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  analytics-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
